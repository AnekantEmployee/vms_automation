import pandas as pd
from typing import Dict, Any

def analyze_vulnerability_node(state: Dict[str, Any]) -> Dict[str, Any]:
    """
    Analyzes the enriched findings DataFrame to generate a security posture scorecard.
    Calculates severity distribution, overall score, and grade based on CVSS scores.
    
    Args:
        state: Workflow state containing 'enriched_findings_df'
        
    Returns:
        Updated state with scorecard DataFrame and metrics
    """
    try:
        print("\n📊 Starting vulnerability analysis and scorecard generation...")
        
        if not state.get("success", False):
            raise Exception("Previous nodes failed or no data available")
        
        findings_df = state.get("enriched_findings_df", pd.DataFrame())
        
        if findings_df.empty:
            print("⚠️ No findings to analyze - generating empty scorecard")
            return {
                "success": True,
                "error": None,
                "scorecard_df": pd.DataFrame(),
                "security_posture_score": 0,
                "security_grade": "F"
            }
        
        # 1. Categorize vulnerabilities by severity based on CVSS scores
        def categorize_severity(score):
            if pd.isna(score):
                return "Info"
            score = float(score)
            if score >= 9.0: return "Critical"
            if score >= 7.0: return "High"
            if score >= 4.0: return "Medium"
            if score > 0: return "Low"
            return "Info"
        
        findings_df['Severity_Rating'] = findings_df['CVE_CVSS_Score'].apply(categorize_severity)
        
        # 2. Calculate severity distribution (counts and percentages)
        severity_counts = findings_df['Severity_Rating'].value_counts().reindex(
            ['Critical', 'High', 'Medium', 'Low', 'Info'], fill_value=0
        )
        
        total_findings = len(findings_df)
        severity_percentages = (severity_counts / total_findings * 100).round(1)
        
        # 3. Calculate security posture score (0-100)
        # Weighted calculation where higher severity findings penalize score more
        severity_weights = {
            'Critical': 0.9,
            'High': 0.7,
            'Medium': 0.5,
            'Low': 0.3,
            'Info': 0.1
        }
        
        if total_findings > 0:
            base_score = 100
            penalty = sum(
                severity_counts[sev] * severity_weights[sev] * 10 
                for sev in severity_counts.index
            )
            security_score = max(0, base_score - penalty)
        else:
            security_score = 100  # Perfect score if no findings
            
        security_score = min(100, round(security_score))
        
        # 4. Determine security grade
        def get_grade(score):
            if score >= 90: return "A"
            if score >= 80: return "B"
            if score >= 60: return "C"
            if score >= 40: return "D"
            if score >= 20: return "E"
            return "F"
        
        security_grade = get_grade(security_score)
        
        # 5. Create scorecard DataFrame in your specified format
        scorecard_data = {
            "Severity Rating": ["Critical", "High", "Medium", "Low", "Info", "Grand Total"],
            "CvSS Score (0-10)": ["9.0-10.0", "7.0-8.9", "4.0-6.9", "0-3.9", "0", ""],
            "Count": [*severity_counts.values, total_findings],
            "Percentage": [*severity_percentages.values, 100],
            "Security Posture Metrics": [
                f"{security_score}%", 
                f"Grade: {security_grade}",
                "", 
                "", 
                "", 
                ""
            ]
        }
        
        scorecard_df = pd.DataFrame(scorecard_data)
        
        print(f"✓ Generated scorecard with security posture score: {security_score}% ({security_grade})")
        print(f"Severity distribution: {dict(severity_counts.items())}")
        
        return {
            "success": True,
            "error": None,
            "scorecard_df": scorecard_df,
            "security_posture_score": security_score,
            "security_grade": security_grade,
            "enriched_findings_df": findings_df  # Pass through the enriched DF
        }
        
    except Exception as e:
        print(f"✗ Error in analyze_vulnerability_node: {str(e)}")
        return {
            "success": False,
            "error": str(e),
            "scorecard_df": pd.DataFrame(),
            "security_posture_score": 0,
            "security_grade": "F"
        }